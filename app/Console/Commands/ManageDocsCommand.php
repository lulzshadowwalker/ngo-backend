<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Process;

class ManageDocsCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'docs:manage 
                            {action : The action to perform (generate|clear|serve|status)}
                            {--env= : Environment file to use for generation}
                            {--clear : Clear existing docs before generating}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Manage API documentation generated by Scribe';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $action = $this->argument('action');

        match ($action) {
            'generate' => $this->generateDocs(),
            'clear' => $this->clearDocs(),
            'serve' => $this->serveDocs(),
            'status' => $this->showStatus(),
            default => $this->error("Unknown action: {$action}. Available actions: generate, clear, serve, status")
        };
    }

    private function generateDocs()
    {
        $this->info('🚀 Generating API documentation...');

        if ($this->option('clear') || $this->confirm('Clear existing documentation first?', false)) {
            $this->clearDocs();
        }

        $command = ['php', 'artisan', 'scribe:generate'];

        if ($env = $this->option('env')) {
            $command[] = "--env={$env}";
            $this->info("🔧 Using environment: {$env}");
        }

        $result = Process::run($command);

        if ($result->successful()) {
            $this->newLine();
            $this->info('✅ API Documentation generated successfully!');
            $this->newLine();
            $this->showDocumentationUrls();
            $this->showGeneratedFiles();
        } else {
            $this->error('❌ Documentation generation failed!');
            $this->line($result->errorOutput());
            $this->newLine();
            $this->comment('💡 Tips:');
            $this->comment('   - Check that all controllers have proper annotations');
            $this->comment('   - Ensure database is accessible if using response calls');
            $this->comment('   - Run with --verbose for more details');
        }
    }

    private function clearDocs()
    {
        $this->info('🧹 Clearing existing documentation...');

        $paths = [
            '.scribe',
            'resources/views/scribe',
            'public/vendor/scribe',
            'storage/app/private/scribe'
        ];

        foreach ($paths as $path) {
            if (File::exists($path)) {
                File::deleteDirectory($path);
                $this->comment("   Cleared: {$path}");
            }
        }

        $this->info('✅ Documentation cleared successfully!');
    }

    private function serveDocs()
    {
        $this->info('🌐 Starting Laravel development server...');
        $this->info('📖 Documentation will be available at: http://localhost:8000/docs');
        $this->newLine();
        $this->comment('Press Ctrl+C to stop the server');
        
        Process::run(['php', 'artisan', 'serve'])->throw();
    }

    private function showStatus()
    {
        $this->info('📊 API Documentation Status');
        $this->line(str_repeat('=', 50));

        // Check if Scribe is installed
        $scribeInstalled = class_exists('Knuckles\Scribe\ScribeServiceProvider');
        $this->line('Scribe Package: ' . ($scribeInstalled ? '✅ Installed' : '❌ Not installed'));

        // Check documentation files
        $files = [
            'Configuration' => 'config/scribe.php',
            'Blade Views' => 'resources/views/scribe',
            'Assets' => 'public/vendor/scribe',
            'Postman Collection' => 'storage/app/private/scribe/collection.json',
            'OpenAPI Spec' => 'storage/app/private/scribe/openapi.yaml',
            'Extraction Data' => '.scribe'
        ];

        $this->newLine();
        $this->comment('Generated Files:');

        foreach ($files as $label => $path) {
            $exists = File::exists($path);
            $status = $exists ? '✅' : '❌';
            $this->line("   {$label}: {$status} ({$path})");
        }

        // Show configuration info
        if (File::exists('config/scribe.php')) {
            $config = include 'config/scribe.php';
            $this->newLine();
            $this->comment('Configuration:');
            $this->line("   Type: {$config['type']}");
            $this->line("   Base URL: {$config['base_url']}");
            $this->line("   Title: {$config['title']}");
            $this->line("   Auth Enabled: " . ($config['auth']['enabled'] ? 'Yes' : 'No'));
            $this->line("   Postman: " . ($config['postman']['enabled'] ? 'Enabled' : 'Disabled'));
            $this->line("   OpenAPI: " . ($config['openapi']['enabled'] ? 'Enabled' : 'Disabled'));
        }

        if ($scribeInstalled && File::exists('resources/views/scribe')) {
            $this->newLine();
            $this->showDocumentationUrls();
        }
    }

    private function showDocumentationUrls()
    {
        $baseUrl = config('app.url', 'http://localhost:8000');
        
        $this->comment('📖 Documentation URLs:');
        $this->line("   Web Documentation: {$baseUrl}/docs");
        $this->line("   Postman Collection: {$baseUrl}/docs.postman");
        $this->line("   OpenAPI Specification: {$baseUrl}/docs.openapi");
    }

    private function showGeneratedFiles()
    {
        $this->comment('📁 Generated Files:');
        $this->line('   Blade views: resources/views/scribe/');
        $this->line('   Assets: public/vendor/scribe/');
        $this->line('   Postman collection: storage/app/private/scribe/collection.json');
        $this->line('   OpenAPI spec: storage/app/private/scribe/openapi.yaml');
        $this->line('   Extraction data: .scribe/');
    }
}
